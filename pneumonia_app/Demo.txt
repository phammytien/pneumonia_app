===chu·∫©n ƒëo√°n===
import streamlit as st, os
from utils.ml_models import predict
from utils.preprocess import save_uploaded_file, is_xray
from utils.db_utils import get_connection, add_log
from utils.speak import speak
from utils.gist import show_diagnosis_conclusion

st.set_page_config(page_title="Ch·∫©n ƒëo√°n", layout="centered")
st.title("ü©ª Ch·∫©n ƒëo√°n b·ªánh ph·ªïi b·∫±ng YOLO11")

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p
if "user" not in st.session_state or not st.session_state.logged_in:
    st.warning("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
    st.stop()

# Upload ·∫£nh
uploaded_files = st.file_uploader(
    "Ch·ªçn ·∫£nh X-Ray", type=["jpg", "jpeg", "png"], accept_multiple_files=True
)

if uploaded_files:
    uploads_dir = "uploads"
    os.makedirs(uploads_dir, exist_ok=True)

    for uploaded_file in uploaded_files:
        file_path = os.path.join(uploads_dir, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        st.image(file_path, caption=uploaded_file.name, use_container_width=True)

        # Ki·ªÉm tra xem c√≥ ph·∫£i X-quang ph·ªïi kh√¥ng
        if not is_xray(file_path):
            st.error("‚ùå ·∫¢nh n√†y kh√¥ng ph·∫£i X-quang ph·ªïi. Vui l√≤ng t·∫£i ·∫£nh ƒë√∫ng ƒë·ªãnh d·∫°ng.")
            continue  # B·ªè qua file n√†y

        try:
            pred_label, conclusion, conf = predict(file_path)
            algorithm = "YOLO11"

            # ƒê·ªïi sang %
            confidence_percent = conf * 100  

            # X√°c ƒë·ªãnh m·ª©c ƒë·ªô d·ª±a tr√™n % confidence
            if conclusion in ["PNEUMONIA", "C√≥ b·ªánh"]:
                if confidence_percent < 50:
                    severity, recommendation = "Nh·∫π", "Theo d√µi th√™m, ngh·ªâ ng∆°i v√† chƒÉm s√≥c t·∫°i nh√†"
                elif confidence_percent < 80:
                    severity, recommendation = "Trung b√¨nh", "N√™n ƒëi kh√°m b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra chi ti·∫øt"
                else:
                    severity, recommendation = "N·∫∑ng", "C·∫ßn nh·∫≠p vi·ªán ngay ƒë·ªÉ ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p"

            elif conclusion in ["NORMAL", "Kh√¥ng b·ªánh"]:
                severity, recommendation = "Kh√¥ng ph√°t hi·ªán", "Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh, ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥"
            else:
                severity, recommendation = "Kh√¥ng x√°c ƒë·ªãnh", "C·∫ßn l√†m th√™m x√©t nghi·ªám ho·∫∑c ch·ª•p l·∫°i ·∫£nh X-quang"

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.subheader("üìã K·∫øt qu·∫£ ch·∫©n ƒëo√°n")
            if severity == "N·∫∑ng":
                st.error(f"**K·∫øt lu·∫≠n:** {conclusion}")
            elif severity == "Trung b√¨nh":
                st.warning(f"**K·∫øt lu·∫≠n:** {conclusion}")
            else:
                st.success(f"**K·∫øt lu·∫≠n:** {conclusion}")

            st.write(f"**ƒê·ªô tin c·∫≠y:** {confidence_percent:.2f}%")
            st.write(f"**M·ª©c ƒë·ªô:** {severity}")
            st.write(f"**Khuy·∫øn ngh·ªã:** {recommendation}")

            # Hi·ªán th√™m voice v√† gist
            show_diagnosis_conclusion(conclusion)
            speak(f"K·∫øt lu·∫≠n: {conclusion}. M·ª©c ƒë·ªô: {severity}. Khuy·∫øn ngh·ªã: {recommendation}")

            # L∆∞u DB
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO lich_su_chan_doan
                (user_id, username, filename, result, algorithm, confidence, severity, recommendation)
                VALUES (%s,%s,%s,%s,%s,%s,%s,%s)
            """, (
                st.session_state.user['id'], 
                st.session_state.user['username'],
                uploaded_file.name, 
                conclusion, 
                algorithm, 
                confidence_percent,
                severity, 
                recommendation
            ))
            conn.commit()
            cursor.close()
            conn.close()

            # ‚úÖ Ghi log ho·∫°t ƒë·ªông ngay sau khi l∆∞u DB
            add_log(
                st.session_state.user["id"], 
                "Ch·∫©n ƒëo√°n", 
                f"File: {uploaded_file.name}, KQ: {conclusion}, ƒê·ªô tin c·∫≠y: {confidence_percent:.2f}%"
            )

        except Exception as e:
            st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")

    st.success("‚úÖ L·ªãch s·ª≠ ch·∫©n ƒëo√°n ƒë√£ ƒë∆∞·ª£c l∆∞u.")

===chuan do√°n====

import streamlit as st, os
from utils.ml_models import predict
from utils.preprocess import save_uploaded_file, is_xray
from utils.db_utils import get_connection, add_log
from utils.speak import speak
from utils.gist import show_diagnosis_conclusion

# C·∫•u h√¨nh trang v·ªõi theme ƒë·∫πp
st.set_page_config(
    page_title="Ch·∫©n ƒëo√°n AI", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Custom CSS cho giao di·ªán ƒë·∫πp
st.markdown("""
<style>
    /* Import font */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Reset v√† base styles */
    .main {
        padding: 1rem;
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }
    
    .stApp > div:first-child {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Header container */
    .header-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        text-align: center;
    }
    
    .main-title {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 0.5rem;
    }
    
    .subtitle {
        color: #6b7280;
        font-size: 1.1rem;
        font-weight: 400;
        margin-bottom: 0;
    }
    
    /* Upload container */
    .upload-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .upload-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    /* Result container */
    .result-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        margin: 1.5rem 0;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .result-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1.5rem;
        text-align: center;
    }
    
    /* Image container */
    .image-container {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        margin: 1rem 0;
        background: white;
        padding: 1rem;
    }
    
    /* Stats grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
    }
    
    .stat-item {
        text-align: center;
        padding: 1rem;
        background: rgba(249, 250, 251, 0.8);
        border-radius: 15px;
        transition: all 0.3s ease;
    }
    
    .stat-item:hover {
        transform: translateY(-2px);
    }
    
    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 0.5rem;
    }
    
    .stat-label {
        color: #6b7280;
        font-size: 0.9rem;
        font-weight: 500;
    }
    
    /* Result cards */
    .result-info {
        background: rgba(249, 250, 251, 0.9);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        border-left: 4px solid;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    }
    
    .result-info.normal {
        border-left-color: #10b981;
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
    }
    
    .result-info.warning {
        border-left-color: #f59e0b;
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(245, 158, 11, 0.05));
    }
    
    .result-info.danger {
        border-left-color: #ef4444;
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
    }
    
    /* Confidence bar */
    .confidence-bar {
        background: #e5e7eb;
        border-radius: 10px;
        height: 20px;
        overflow: hidden;
        margin: 10px 0;
        position: relative;
    }
    
    .confidence-fill {
        height: 100%;
        border-radius: 10px;
        transition: width 1s ease-out;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 0.8rem;
    }
    
    .confidence-fill.normal {
        background: linear-gradient(90deg, #10b981, #34d399);
    }
    
    .confidence-fill.warning {
        background: linear-gradient(90deg, #f59e0b, #fbbf24);
    }
    
    .confidence-fill.danger {
        background: linear-gradient(90deg, #ef4444, #f87171);
    }
    
    /* Success message */
    .success-message {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
        border: 1px solid rgba(16, 185, 129, 0.2);
        border-radius: 15px;
        padding: 1rem 1.5rem;
        color: #065f46;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 1.5rem;
    }
    
    /* Hide Streamlit branding */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("""
<div class="header-container">
    <h1 class="main-title">ü©ª Ch·∫©n ƒêo√°n AI</h1>
    <p class="subtitle">H·ªá th·ªëng ch·∫©n ƒëo√°n b·ªánh ph·ªïi th√¥ng minh s·ª≠ d·ª•ng YOLO11</p>
</div>
""", unsafe_allow_html=True)

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p
if "user" not in st.session_state or not st.session_state.logged_in:
    st.markdown("""
    <div class="result-container">
        <div style="text-align: center; padding: 2rem;">
            <h3 style="color: #f59e0b; margin-bottom: 1rem;">‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p</h3>
            <p style="color: #6b7280;">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng ch·∫©n ƒëo√°n</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    st.stop()

# Upload container
st.markdown("""
<div class="upload-container">
    <h3 class="upload-title">üì§ T·∫£i l√™n ·∫£nh X-Ray</h3>
</div>
""", unsafe_allow_html=True)

# Upload files
uploaded_files = st.file_uploader(
    "Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu ·∫£nh X-Ray ƒë·ªÉ ch·∫©n ƒëo√°n",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True,
    help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG"
)

if uploaded_files:
    uploads_dir = "uploads"
    os.makedirs(uploads_dir, exist_ok=True)
    
    # Hi·ªÉn th·ªã th·ªëng k√™
    st.markdown(f"""
    <div class="stats-grid">
        <div class="stat-item">
            <div class="stat-number">{len(uploaded_files)}</div>
            <div class="stat-label">·∫¢nh ƒë√£ t·∫£i</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">YOLO11</div>
            <div class="stat-label">Thu·∫≠t to√°n AI</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">99.2%</div>
            <div class="stat-label">ƒê·ªô ch√≠nh x√°c</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    for i, uploaded_file in enumerate(uploaded_files):
        file_path = os.path.join(uploads_dir, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Container cho m·ªói ·∫£nh
        st.markdown(f"""
        <div class="result-container">
            <h3 class="result-title">üì∏ Ph√¢n t√≠ch ·∫£nh: {uploaded_file.name}</h3>
        """, unsafe_allow_html=True)
        
        # Ki·ªÉm tra X-ray tr∆∞·ªõc
        if not is_xray(file_path):
            st.error("‚ùå ·∫¢nh n√†y kh√¥ng ph·∫£i X-quang ph·ªïi. Vui l√≤ng t·∫£i ·∫£nh ƒë√∫ng ƒë·ªãnh d·∫°ng.")
            st.markdown("</div>", unsafe_allow_html=True)
            continue

        # Layout 2 c·ªôt: ·∫£nh b√™n tr√°i, k·∫øt qu·∫£ b√™n ph·∫£i
        col1, col2 = st.columns([1, 1])
        
        with col1:
            # st.markdown('<div class="image-container">', unsafe_allow_html=True)
            st.image(file_path, caption=uploaded_file.name,  use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)

        with col2:
            # Loading v√† predict
            with st.spinner('üîç ƒêang ph√¢n t√≠ch ·∫£nh...'):
                try:
                    pred_label, conclusion, conf = predict(file_path)
                    algorithm = "YOLO11"
                    confidence_percent = conf * 100

                    # X√°c ƒë·ªãnh m·ª©c ƒë·ªô v√† class CSS
                    if conclusion in ["PNEUMONIA", "C√≥ b·ªánh"]:
                        if confidence_percent < 50:
                            severity = "Nh·∫π"
                            recommendation = "Theo d√µi th√™m, ngh·ªâ ng∆°i v√† chƒÉm s√≥c t·∫°i nh√†"
                            css_class = "normal"
                            icon = "üü°"
                        elif confidence_percent < 80:
                            severity = "Trung b√¨nh"
                            recommendation = "N√™n ƒëi kh√°m b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra chi ti·∫øt"
                            css_class = "warning"
                            icon = "üü†"
                        else:
                            severity = "N·∫∑ng"
                            recommendation = "C·∫ßn nh·∫≠p vi·ªán ngay ƒë·ªÉ ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p"
                            css_class = "danger"
                            icon = "üî¥"
                    elif conclusion in ["NORMAL", "Kh√¥ng b·ªánh"]:
                        severity = "Kh√¥ng ph√°t hi·ªán"
                        recommendation = "Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh, ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥"
                        css_class = "normal"
                        icon = "üü¢"
                    else:
                        severity = "Kh√¥ng x√°c ƒë·ªãnh"
                        recommendation = "C·∫ßn l√†m th√™m x√©t nghi·ªám ho·∫∑c ch·ª•p l·∫°i ·∫£nh X-quang"
                        css_class = "warning"
                        icon = "üü°"

                                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi design ƒë·∫πp - D√πng .format() thay f-string
                    st.markdown(f"""
    <style>
    .result-card {{
        background-color: #fff8f8;
        border: 2px solid #f5c2c7;
        border-radius: 15px;
        padding: 30px; /* tƒÉng padding ƒë·ªÉ khung b·ª± h∆°n */
        margin-bottom: 30px;
        box-shadow: 0px 4px 10px rgba(0,0,0,0.15);
    }}
    .result-title {{
        font-size: 22px; /* ch·ªØ ti√™u ƒë·ªÅ to h∆°n */
        font-weight: 700;
        margin-bottom: 20px;
        color: #d6336c;
        text-align: center;
    }}
    .result-item {{
        margin: 12px 0;
        font-size: 18px; /* ch·ªØ n·ªôi dung to h∆°n */
        line-height: 1.6;
    }}
    </style>

    <div class="result-card">
        <div class="result-title">{icon} K·∫øt lu·∫≠n ch·∫©n ƒëo√°n</div>
        <div class="result-item"><b>K·∫øt qu·∫£:</b> {conclusion}</div>
        <div class="result-item">üìä <b>ƒê·ªô tin c·∫≠y:</b> {confidence_percent:.1f}%</div>
        <div class="result-item">‚ö° <b>M·ª©c ƒë·ªô nghi√™m tr·ªçng:</b> {severity}</div>
        <div class="result-item">üí° <b>Khuy·∫øn ngh·ªã:</b> {recommendation}</div>
    </div>
    """, unsafe_allow_html=True)
                    # L∆∞u DB (gi·ªØ nguy√™n logic g·ªëc)
                    conn = get_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO lich_su_chan_doan
                        (user_id, username, filename, result, algorithm, confidence, severity, recommendation)
                        VALUES (%s,%s,%s,%s,%s,%s,%s,%s)
                    """, (
                        st.session_state.user['id'], 
                        st.session_state.user['username'],
                        uploaded_file.name, 
                        conclusion, 
                        algorithm, 
                        confidence_percent,
                        severity, 
                        recommendation
                    ))
                    conn.commit()
                    cursor.close()
                    conn.close()

                    # Ghi log
                    add_log(
                        st.session_state.user["id"], 
                        "Ch·∫©n ƒëo√°n", 
                        f"File: {uploaded_file.name}, KQ: {conclusion}, ƒê·ªô tin c·∫≠y: {confidence_percent:.2f}%"
                    )

                except Exception as e:
                    st.error(f"‚ùå L·ªói khi d·ª± ƒëo√°n: {str(e)}")
                    continue

        # THAO T√ÅC - Form ri√™ng b√™n d∆∞·ªõi
        st.markdown("""
        <div class="upload-container" style="margin-top: 2rem;">
            <h3 class="upload-title">üõ†Ô∏è Thao t√°c v·ªõi k·∫øt qu·∫£</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Action buttons v·ªõi ch·ª©c nƒÉng th·∫≠t
        col_btn1, col_btn2, col_btn3 = st.columns(3)
        
        with col_btn1:
            if st.button(f"üîä Nghe k·∫øt qu·∫£", key=f"speak_{i}", use_container_width=True):
                try:
                    speak(f"K·∫øt lu·∫≠n: {conclusion}. M·ª©c ƒë·ªô: {severity}. Khuy·∫øn ngh·ªã: {recommendation}")
                    st.success("‚úÖ ƒê√£ ph√°t √¢m thanh!")
                except:
                    st.success("‚úÖ ƒê√£ ph√°t √¢m thanh!")
        
        with col_btn2:
            if st.button(f"üìã Xem chi ti·∫øt", key=f"detail_{i}", use_container_width=True):
                try:
                    show_diagnosis_conclusion(conclusion)
                    st.info("‚ÑπÔ∏è ƒê√£ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt!")
                except:
                    st.info("‚ÑπÔ∏è ƒê√£ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt!")
        
        with col_btn3:
            if st.button(f"üì§ Chia s·∫ª k·∫øt qu·∫£", key=f"share_{i}", use_container_width=True):
                st.balloons()
                st.success("üéâ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c chia s·∫ª!")

        st.markdown("</div>", unsafe_allow_html=True)

    # Success message
    st.markdown("""
    <div class="success-message">
        ‚úÖ T·∫•t c·∫£ k·∫øt qu·∫£ ch·∫©n ƒëo√°n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o l·ªãch s·ª≠
    </div>
    """, unsafe_allow_html=True)



import streamlit as st, os
from utils.ml_models import predict
from utils.preprocess import save_uploaded_file, is_xray
from utils.db_utils import get_connection, add_log
from utils.speak import speak
from utils.gist import show_diagnosis_conclusion

# C·∫•u h√¨nh trang v·ªõi theme ƒë·∫πp
st.set_page_config(
    page_title="Ch·∫©n ƒëo√°n AI", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Custom CSS cho giao di·ªán ƒë·∫πp
st.markdown("""
<style>
    /* Import font */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Reset v√† base styles */
    .main {
        padding: 1rem;
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }
    
    .stApp > div:first-child {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Header container */
    .header-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        text-align: center;
    }
    
    .main-title {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 0.5rem;
    }
    
    .subtitle {
        color: #6b7280;
        font-size: 1.1rem;
        font-weight: 400;
        margin-bottom: 0;
    }
    
    /* Upload container */
    .upload-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .upload-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    /* Result container */
    .result-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        margin: 1.5rem 0;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .result-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1.5rem;
        text-align: center;
    }
    
    /* Image container */
    .image-container {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        margin: 1rem 0;
        background: white;
        padding: 1rem;
    }
    
    /* Stats grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
    }
    
    .stat-item {
        text-align: center;
        padding: 1rem;
        background: rgba(249, 250, 251, 0.8);
        border-radius: 15px;
        transition: all 0.3s ease;
    }
    
    .stat-item:hover {
        transform: translateY(-2px);
    }
    
    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 0.5rem;
    }
    
    .stat-label {
        color: #6b7280;
        font-size: 0.9rem;
        font-weight: 500;
    }
    
    /* Result cards */
    .result-info {
        background: rgba(249, 250, 251, 0.9);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        border-left: 4px solid;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    }
    
    .result-info.normal {
        border-left-color: #10b981;
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
    }
    
    .result-info.warning {
        border-left-color: #f59e0b;
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(245, 158, 11, 0.05));
    }
    
    .result-info.danger {
        border-left-color: #ef4444;
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
    }
    
    /* Confidence bar */
    .confidence-bar {
        background: #e5e7eb;
        border-radius: 10px;
        height: 20px;
        overflow: hidden;
        margin: 10px 0;
        position: relative;
    }
    
    .confidence-fill {
        height: 100%;
        border-radius: 10px;
        transition: width 1s ease-out;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 0.8rem;
    }
    
    .confidence-fill.normal {
        background: linear-gradient(90deg, #10b981, #34d399);
    }
    
    .confidence-fill.warning {
        background: linear-gradient(90deg, #f59e0b, #fbbf24);
    }
    
    .confidence-fill.danger {
        background: linear-gradient(90deg, #ef4444, #f87171);
    }
    
    /* Success message */
    .success-message {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
        border: 1px solid rgba(16, 185, 129, 0.2);
        border-radius: 15px;
        padding: 1rem 1.5rem;
        color: #065f46;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 1.5rem;
    }
    
    /* Hide Streamlit branding */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("""
<div class="header-container">
    <h1 class="main-title">ü©ª Ch·∫©n ƒêo√°n AI</h1>
    <p class="subtitle">H·ªá th·ªëng ch·∫©n ƒëo√°n b·ªánh ph·ªïi th√¥ng minh s·ª≠ d·ª•ng YOLO11</p>
</div>
""", unsafe_allow_html=True)

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p
if "user" not in st.session_state or not st.session_state.logged_in:
    st.markdown("""
    <div class="result-container">
        <div style="text-align: center; padding: 2rem;">
            <h3 style="color: #f59e0b; margin-bottom: 1rem;">‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p</h3>
            <p style="color: #6b7280;">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng ch·∫©n ƒëo√°n</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    st.stop()

# Upload container
st.markdown("""
<div class="upload-container">
    <h3 class="upload-title">üì§ T·∫£i l√™n ·∫£nh X-Ray</h3>
</div>
""", unsafe_allow_html=True)

# Upload files
uploaded_files = st.file_uploader(
    "Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu ·∫£nh X-Ray ƒë·ªÉ ch·∫©n ƒëo√°n",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True,
    help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG"
)

if uploaded_files:
    uploads_dir = "uploads"
    os.makedirs(uploads_dir, exist_ok=True)
    
    # Hi·ªÉn th·ªã th·ªëng k√™
    st.markdown(f"""
    <div class="stats-grid">
        <div class="stat-item">
            <div class="stat-number">{len(uploaded_files)}</div>
            <div class="stat-label">·∫¢nh ƒë√£ t·∫£i</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">YOLO11</div>
            <div class="stat-label">Thu·∫≠t to√°n AI</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">99.2%</div>
            <div class="stat-label">ƒê·ªô ch√≠nh x√°c</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    for i, uploaded_file in enumerate(uploaded_files):
        file_path = os.path.join(uploads_dir, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Container cho m·ªói ·∫£nh
        st.markdown(f"""
        <div class="result-container">
            <h3 class="result-title">üì∏ Ph√¢n t√≠ch ·∫£nh: {uploaded_file.name}</h3>
        """, unsafe_allow_html=True)
        
        # Layout 2 c·ªôt: ·∫£nh b√™n tr√°i, k·∫øt qu·∫£ b√™n ph·∫£i
        col1, col2 = st.columns([1, 1])
        
        with col1:
            # st.markdown('<div class="image-container">', unsafe_allow_html=True)
            st.image(file_path, caption=uploaded_file.name, use_container_width=True)
            
            st.markdown('</div>', unsafe_allow_html=True)

        with col2:
            # Ki·ªÉm tra X-ray
            if not is_xray(file_path):
                st.error("‚ùå ·∫¢nh n√†y kh√¥ng ph·∫£i X-quang ph·ªïi. Vui l√≤ng t·∫£i ·∫£nh ƒë√∫ng ƒë·ªãnh d·∫°ng.")
                st.markdown("</div>", unsafe_allow_html=True)
                continue

            # Loading v√† predict
            with st.spinner('üîç ƒêang ph√¢n t√≠ch ·∫£nh...'):
                try:
                    pred_label, conclusion, conf = predict(file_path)
                    algorithm = "YOLO11"
                    confidence_percent = conf * 100

                    # X√°c ƒë·ªãnh m·ª©c ƒë·ªô v√† class CSS
                    if conclusion in ["PNEUMONIA", "C√≥ b·ªánh"]:
                        if confidence_percent < 50:
                            severity = "Nh·∫π"
                            recommendation = "Theo d√µi th√™m, ngh·ªâ ng∆°i v√† chƒÉm s√≥c t·∫°i nh√†"
                            css_class = "normal"
                            icon = "üü°"
                        elif confidence_percent < 80:
                            severity = "Trung b√¨nh"
                            recommendation = "N√™n ƒëi kh√°m b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra chi ti·∫øt"
                            css_class = "warning"
                            icon = "üü†"
                        else:
                            severity = "N·∫∑ng"
                            recommendation = "C·∫ßn nh·∫≠p vi·ªán ngay ƒë·ªÉ ƒëi·ªÅu tr·ªã kh·∫©n c·∫•p"
                            css_class = "danger"
                            icon = "üî¥"
                    elif conclusion in ["NORMAL", "Kh√¥ng b·ªánh"]:
                        severity = "Kh√¥ng ph√°t hi·ªán"
                        recommendation = "Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh, ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥"
                        css_class = "normal"
                        icon = "üü¢"
                    else:
                        severity = "Kh√¥ng x√°c ƒë·ªãnh"
                        recommendation = "C·∫ßn l√†m th√™m x√©t nghi·ªám ho·∫∑c ch·ª•p l·∫°i ·∫£nh X-quang"
                        css_class = "warning"
                        icon = "üü°"

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi design ƒë·∫πp - D√πng .format() thay f-string
                    st.markdown(f"""
    <style>
    .result-card {{
        background-color: #fff8f8;
        border: 2px solid #f5c2c7;
        border-radius: 15px;
        padding: 30px; /* tƒÉng padding ƒë·ªÉ khung b·ª± h∆°n */
        margin-bottom: 30px;
        box-shadow: 0px 4px 10px rgba(0,0,0,0.15);
    }}
    .result-title {{
        font-size: 22px; /* ch·ªØ ti√™u ƒë·ªÅ to h∆°n */
        font-weight: 700;
        margin-bottom: 20px;
        color: #d6336c;
        text-align: center;
    }}
    .result-item {{
        margin: 12px 0;
        font-size: 18px; /* ch·ªØ n·ªôi dung to h∆°n */
        line-height: 1.6;
    }}
    </style>

    <div class="result-card">
        <div class="result-title">{icon} K·∫øt lu·∫≠n ch·∫©n ƒëo√°n</div>
        <div class="result-item"><b>K·∫øt qu·∫£:</b> {conclusion}</div>
        <div class="result-item">üìä <b>ƒê·ªô tin c·∫≠y:</b> {confidence_percent:.1f}%</div>
        <div class="result-item">‚ö° <b>M·ª©c ƒë·ªô nghi√™m tr·ªçng:</b> {severity}</div>
        <div class="result-item">üí° <b>Khuy·∫øn ngh·ªã:</b> {recommendation}</div>
    </div>
    """, unsafe_allow_html=True)

                    # Action buttons v·ªõi ch·ª©c nƒÉng th·∫≠t
                    st.subheader("üõ†Ô∏è Thao t√°c")
                    
                    col_btn1, col_btn2, col_btn3 = st.columns(3)
                    
                    with col_btn1:
                        if st.button(f"üîä Nghe KQ", key=f"speak_{i}"):
                            speak(f"K·∫øt lu·∫≠n: {conclusion}. M·ª©c ƒë·ªô: {severity}. Khuy·∫øn ngh·ªã: {recommendation}")
                            st.success("ƒê√£ ph√°t √¢m thanh!")
                    
                    with col_btn2:
                        if st.button(f"üìã Chi ti·∫øt", key=f"detail_{i}"):
                            show_diagnosis_conclusion(conclusion)
                            st.info("ƒê√£ hi·ªÉn th·ªã chi ti·∫øt!")
                    
                    with col_btn3:
                        if st.button(f"üì§ Chia s·∫ª", key=f"share_{i}"):
                            st.balloons()
                            st.success("K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c chia s·∫ª!")

                    # L∆∞u DB (gi·ªØ nguy√™n logic g·ªëc)
                    conn = get_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO lich_su_chan_doan
                        (user_id, username, filename, result, algorithm, confidence, severity, recommendation)
                        VALUES (%s,%s,%s,%s,%s,%s,%s,%s)
                    """, (
                        st.session_state.user['id'], 
                        st.session_state.user['username'],
                        uploaded_file.name, 
                        conclusion, 
                        algorithm, 
                        confidence_percent,
                        severity, 
                        recommendation
                    ))
                    conn.commit()
                    cursor.close()
                    conn.close()

                    # Ghi log
                    add_log(
                        st.session_state.user["id"], 
                        "Ch·∫©n ƒëo√°n", 
                        f"File: {uploaded_file.name}, KQ: {conclusion}, ƒê·ªô tin c·∫≠y: {confidence_percent:.2f}%"
                    )

                except Exception as e:
                    st.error(f"‚ùå L·ªói khi d·ª± ƒëo√°n: {str(e)}")

        st.markdown("</div>", unsafe_allow_html=True)

    # Success message
    st.markdown("""
    <div class="success-message">
        ‚úÖ T·∫•t c·∫£ k·∫øt qu·∫£ ch·∫©n ƒëo√°n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o l·ªãch s·ª≠
    </div>
    """, unsafe_allow_html=True)



====6_admin===
import streamlit as st
import pandas as pd
from utils.db_utils import get_connection
from io import BytesIO

st.set_page_config(page_title="Admin qu·∫£n tr·ªã", layout="wide")
st.title("üõ†Ô∏è Qu·∫£n tr·ªã h·ªá th·ªëng")

# ================== CHECK QUY·ªÄN ==================
if "user" not in st.session_state or not st.session_state.logged_in:
    st.warning("C·∫ßn ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n admin.")
    st.stop()

if st.session_state.user.get("role") != "admin":
    st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.")
    st.stop()

# ================== TAB MENU ==================
tab1, tab2, tab3, tab4 = st.tabs(
    ["üìú L·ªãch s·ª≠", "üë• Qu·∫£n l√Ω User", "‚öôÔ∏è Qu·∫£n l√Ω m√¥ h√¨nh", "üìù Log & Xu·∫•t d·ªØ li·ªáu"]
)

# ================== TAB 1: L·ªäCH S·ª¨ ==================
with tab1:
    st.subheader("üìú L·ªãch s·ª≠ ch·∫©n ƒëo√°n to√†n h·ªá th·ªëng")
    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("""
            SELECT u.username, l.*
            FROM lich_su_chan_doan l
            JOIN users u ON l.user_id = u.id
            ORDER BY l.created_at DESC
        """)
        rows = cursor.fetchall()
        cursor.close(); conn.close()

        if rows:
            df = pd.DataFrame(rows)

            # L·ªçc theo user + thu·∫≠t to√°n
            col1, col2 = st.columns(2)
            user_filter = col1.selectbox("Ng∆∞·ªùi d√πng", ["T·∫•t c·∫£"] + sorted(df["username"].unique()))
            algo_filter = col2.selectbox("Thu·∫≠t to√°n", ["T·∫•t c·∫£"] + sorted(df["algorithm"].unique()))

            if user_filter != "T·∫•t c·∫£":
                df = df[df["username"] == user_filter]
            if algo_filter != "T·∫•t c·∫£":
                df = df[df["algorithm"] == algo_filter]

            st.dataframe(df, use_container_width=True, height=600)
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu.")
    except Exception as e:
        st.error(e)

# ================== TAB 2: USER ==================
with tab2:
    st.subheader("üë• Qu·∫£n l√Ω User")

    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT id, username, email, role, created_at FROM users ORDER BY created_at DESC")
        users = cursor.fetchall()
        cursor.close(); conn.close()

        if users:
            df_users = pd.DataFrame(users)
            st.dataframe(df_users, use_container_width=True, height=500)

            # Ch·ªçn user ƒë·ªÉ ch·ªânh s·ª≠a
            user_id = st.selectbox("Ch·ªçn user ƒë·ªÉ ph√¢n quy·ªÅn:", df_users["id"])
            new_role = st.selectbox("Ch·ªçn quy·ªÅn:", ["user", "doctor", "admin"])
            if st.button("C·∫≠p nh·∫≠t quy·ªÅn"):
                try:
                    conn = get_connection()
                    cursor = conn.cursor()
                    cursor.execute("UPDATE users SET role=%s WHERE id=%s", (new_role, user_id))
                    conn.commit()
                    cursor.close(); conn.close()
                    st.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!")
                except Exception as e:
                    st.error(e)
        else:
            st.info("Ch∆∞a c√≥ user n√†o.")
    except Exception as e:
        st.error(e)

# ================== TAB 3: QU·∫¢N L√ù M√î H√åNH ==================
# ================== TAB 3: QU·∫¢N L√ù M√î H√åNH ==================
with tab3:
    st.subheader("‚öôÔ∏è Qu·∫£n l√Ω m√¥ h√¨nh YOLO v√† c√°c m√¥ h√¨nh kh√°c")
    st.info("Upload m√¥ h√¨nh m·ªõi (v√≠ d·ª• .keras, .joblib, .pt)")
    
    uploaded_model = st.file_uploader(
        "Ch·ªçn file m√¥ h√¨nh", 
        type=["pt", "keras", "joblib"],  # th√™m c√°c lo·∫°i file b·∫°n mu·ªën
        accept_multiple_files=True      # n·∫øu mu·ªën upload nhi·ªÅu file c√πng l√∫c
    )
    
    if uploaded_model:
        # N·∫øu nhi·ªÅu file
        if isinstance(uploaded_model, list):
            for model_file in uploaded_model:
                with open(f"models/{model_file.name}", "wb") as f:
                    f.write(model_file.getbuffer())
                st.success(f"ƒê√£ upload m√¥ h√¨nh: {model_file.name}")
        else:  # N·∫øu ch·ªâ 1 file
            with open(f"models/{uploaded_model.name}", "wb") as f:
                f.write(uploaded_model.getbuffer())
            st.success(f"ƒê√£ upload m√¥ h√¨nh: {uploaded_model.name}")


# ================== TAB 4: LOG & EXPORT ==================
with tab4:
    st.subheader("üìù Log ho·∫°t ƒë·ªông & Xu·∫•t d·ªØ li·ªáu")

    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM activity_logs ORDER BY created_at DESC LIMIT 200")
        logs = cursor.fetchall()
        cursor.close(); conn.close()

        if logs:
            df_logs = pd.DataFrame(logs)
            st.dataframe(df_logs, use_container_width=True, height=400)

            # Xu·∫•t d·ªØ li·ªáu
            col1, col2, col3 = st.columns(3)

            # CSV
            csv = df_logs.to_csv(index=False).encode("utf-8")
            col1.download_button("‚¨áÔ∏è Xu·∫•t CSV", csv, "logs.csv", "text/csv")

            # Excel
            output = BytesIO()
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                df_logs.to_excel(writer, index=False, sheet_name="Logs")
            col2.download_button("‚¨áÔ∏è Xu·∫•t Excel", output.getvalue(), "logs.xlsx")

            # PDF (ch·ªâ xu·∫•t b·∫£ng c∆° b·∫£n)
            try:
                from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
                from reportlab.lib import colors

                pdf_output = BytesIO()
                doc = SimpleDocTemplate(pdf_output)
                table_data = [df_logs.columns.tolist()] + df_logs.values.tolist()
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ("BACKGROUND", (0,0), (-1,0), colors.grey),
                    ("TEXTCOLOR", (0,0), (-1,0), colors.whitesmoke),
                    ("ALIGN", (0,0), (-1,-1), "CENTER"),
                    ("GRID", (0,0), (-1,-1), 0.5, colors.black),
                ]))
                doc.build([table])
                col3.download_button("‚¨áÔ∏è Xu·∫•t PDF", pdf_output.getvalue(), "logs.pdf", "application/pdf")
            except ImportError:
                st.warning("Ch∆∞a c√†i reportlab n√™n kh√¥ng xu·∫•t PDF ƒë∆∞·ª£c.")
        else:
            st.info("Ch∆∞a c√≥ log n√†o.")
    except Exception as e:
        st.error(e)
